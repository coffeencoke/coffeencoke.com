<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Coffeencoke]]></title>
  <link href="http://coffeencoke.com/atom.xml" rel="self"/>
  <link href="http://coffeencoke.com/"/>
  <updated>2013-09-10T21:26:38-05:00</updated>
  <id>http://coffeencoke.com/</id>
  <author>
    <name><![CDATA[Matt Simpson]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[New Blog, New Tools, New Direction]]></title>
    <link href="http://coffeencoke.com/blog/2013/06/08/new-blog-new-direction/"/>
    <updated>2013-06-08T00:00:00-05:00</updated>
    <id>http://coffeencoke.com/blog/2013/06/08/new-blog-new-direction</id>
    <content type="html"><![CDATA[<h2 id='new_blog'>New Blog</h2>

<p>I have decided to kill off the name that I have been using for my programming blog and twitter account, Railsgrammer, and use my personal handle for everything, Coffeencoke.</p>

<p>In doing so, I also was tired of maintaining wordpress for myself and having scalability issues with my server, and requiring database backups and time consuming moments of migrating the blog to a new server.</p>

<h2 id='new_tools'>New Tools</h2>

<p>I also want to learn and use new tools. It&#8217;s time to say goodbye to Wordpress, and hello to Jekyll.</p>

<p><a href='http://jekyllrb.com/'>Jekyll</a> is open source code that will &#8220;Transform your plain text into static websites and blogs&#8221;. I have been using Jekyll for a number of things lately:</p>

<ul>
<li>
<p>API Documentation</p>

<ul>
<li>Editable for developers and the core team by using <a href='https://github.com/gollum/gollum'>Gollum</a></li>

<li>Readonly for consumers by using <a href='https://github.com/dreverri/gollum-site'>Gollum Site</a></li>
</ul>
</li>

<li>
<p>My blog</p>
</li>

<li>
<p>Team wiki for my projects</p>
</li>
</ul>

<p>I think that it is a fantastic idea, and I am so glad that I will be able to develop my blog and portfolio website without the clunky setup for a wordpress environment.</p>

<p>I encourage you to take a look at these and thanking the creators of them for providing such excellent tools:</p>

<ul>
<li><a href='https://github.com/mojombo/jekyll'>Jekyll</a></li>

<li><a href='https://github.com/gollum/gollum'>Gollum</a></li>

<li><a href='https://github.com/dreverri/gollum-site'>Gollum Site</a></li>
</ul>

<h2 id='hosting_no_mas'>Hosting no mas</h2>

<p>Also, I will not need to host my blog somewhere, pay for it, maintain it, and keep an eye out for whether it is up or not, thanks to <a href='http://pages.github.com/'>Github sites</a> and <a href='https://help.github.com/articles/setting-up-a-custom-domain-with-pages'>custom domains</a>!</p>

<p>Freaking awesome!</p>

<h2 id='new_direction'>New Direction</h2>

<p>I&#8217;ve been developing software professionally since 2005. I am self taught and driven. Back then, I had a bit more <em>play time</em> than I do now, and understandably so.</p>

<p>As my wife and I continue in the path of our careers together, I want to intentionally grow in the following:</p>

<ul>
<li>Computer Science - Algorithms, Data Structures</li>

<li>Other Languages - Expanding my exposure to other languages</li>

<li>Community - Give back to the community and be a part of pushing technology forward</li>

<li>Business - Entrepreneurial knowledge and growth</li>
</ul>

<h3 id='computer_science'>Computer Science</h3>

<p>I have a strong knowledge of how to develop good software, how things should be designed, and how code should be designed. But most of that is from experiences, and by thinking through past decisions and applying it to future decisions.</p>

<p>However, I do not have the depth of a computer science degree when it comes to understanding algorithms and data structures. So I want to grow in that.</p>

<h3 id='other_languages'>Other Languages</h3>

<p>I&#8217;m proficient in Ruby, HTML, CSS, and Javascript. Have had experience in PHP, Java, C#, and ObjectiveC. But I want to broaden my experience with other languages, such as Haskel, Lua, Scala, Erlang, Node.js, Go, and anything else that sounds interesting.</p>

<h3 id='community'>Community</h3>

<p>Lately I&#8217;ve been wanting to be more involved with the community in many ways, specifically at conferences and local meet up groups. I also want to be involved to help others learn how to become better developers.</p>

<h3 id='business'>Business</h3>

<p>I have a passion for being an entrepreneur, I want to learn how I can follow that passion as effectively as possible. This includes accounting, networking, ideas, branding, and development if all of what it takes to create a business or product.</p>

<h2 id='wrapup'>Wrapup</h2>

<p>I&#8217;m excited to begin sharing what I have to share about these topics, if you have any direction, suggestions, or encouragement, please let me know.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sub Directory Rails App - Part 2]]></title>
    <link href="http://coffeencoke.com/blog/2013/02/24/sub-directory-rails-app-part-2/"/>
    <updated>2013-02-24T00:00:00-06:00</updated>
    <id>http://coffeencoke.com/blog/2013/02/24/sub-directory-rails-app-part-2</id>
    <content type="html"><![CDATA[<p>Recently I <a href="http://railsgrammer.com/2012/12/serving-rails-with-a-subdirectory-root-path/">wrote about serving rails at a sub directory within another app</a>. I've recently deployed a new Rails 3 application with this and have discovered a few modifications to this. I've been maintaining a <a href="https://gist.github.com/coffeencoke/4422617">gist of my own</a> to contain the changes required to serve a rails app at a subdirectory. I was having a hard time getting all of the following cases to succeed: 1. Serve static files of root app and sub app through Nginx. 2. Serve rails requests for the appropriate app 3. Generate the correct paths via Rails 3 asset pipeline so that an app at /subdir generated assets with linking to images at /subdir/assets rather than /assets If you follow the template laid out in</p>

<p><a href="https://gist.github.com/coffeencoke/4422617">the gist</a> you should have no problems. Pay close attention to the README as well as the other files in the gist! I'd love to see other people's implementations and challenges they faced and how they solved them. Let me know if you have any feedback or improvements.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Nginx]]></title>
    <link href="http://coffeencoke.com/blog/2013/02/24/managing-nginx/"/>
    <updated>2013-02-24T00:00:00-06:00</updated>
    <id>http://coffeencoke.com/blog/2013/02/24/managing-nginx</id>
    <content type="html"><![CDATA[Quick note...

Perhaps you have a monitoring process managing your Nginx processes, or your init scripts are broken, or you're on a mac and have no clue how to start nginx.  Simply use the bin file.

You can find this by running the <code>which nginx</code> command. And start using it.  Go to the <a href='http://wiki.nginx.org/CommandLine'>Nginx Command Line page</a> for more details.

<pre>
# Start nginx
nginx
# Reload nginx
nginx -s reload
# Test config but do not effect the running processes
nginx -t
</pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging Nginx configs]]></title>
    <link href="http://coffeencoke.com/blog/2013/02/24/debugging-nginx-configs/"/>
    <updated>2013-02-24T00:00:00-06:00</updated>
    <id>http://coffeencoke.com/blog/2013/02/24/debugging-nginx-configs</id>
    <content type="html"><![CDATA[Often when working with web applications you need to write some pretty complicated Nginx configs. For example, if you are needing to support a rails application that is hosted as a sub-domain. This will require some complicated nginx configurations for serving static files, and using the correct root directory for the main app, as well as the app served at the subdirectory. Or, if you are configuring a wordpress site, with all that caching craziness!

This post is about making it easier to develop your Nginx configurations, not about rails app served as a sub directory. That <a href="http://railsgrammer.com/2012/12/serving-rails-with-a-subdirectory-root-path/">post can be found here</a>.

<h2>1. Install Echo</h2>

<blockquote>ngx_echo - Brings "echo", "sleep", "time", "exec" and more shell-style goodies to Nginx config file.</blockquote>

It is a whole lot easier to develop your configurations when you can echo some debugging statements, especially if you're using regular expressions in your configuration.

However, unfortunately, you need to install the <code>ngx_echo</code> module when you compile and install Nginx itself. :(

This is not terribly complicated but is something I do not encourage you to do on a server that you are actually using for productive work.

Install it on your development computer!

My notes from the <a href='http://wiki.nginx.org/HttpEchoModule#Installation'>ngx_echo installation instructions</a>:

<pre>
wget http://nginx.org/download/nginx-1.2.7.tar.gz
tar -xzf nginx-1.2.7.tar.gz
wget https://nodeload.github.com/agentzh/echo-nginx-module/tar.gz/v0.42
tar -xzf v0.42
cd nginx-1.2.7
sudo ./configure --prefix=/etc/nginx --sbin-path=/usr/local/bin/nginx --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/tmp --with-http_ssl_module --with-http_gzip_static_module  --add-module=/Users/matt/tmp/echo-nginx-module-0.42
# Read the output to make sure this is what you want!
sudo make
sudo make install
</pre>

Read <a href='http://wiki.nginx.org/HttpEchoModule'>the echo documentation</a> and you will be able to see what you are configuring without having to steal a server and disable somebody's productivity.

Cheers.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serving Rails with a Subdirectory Root Path]]></title>
    <link href="http://coffeencoke.com/blog/2012/12/31/serving-rails-with-a-subdirectory-root-path/"/>
    <updated>2012-12-31T00:00:00-06:00</updated>
    <id>http://coffeencoke.com/blog/2012/12/31/serving-rails-with-a-subdirectory-root-path</id>
    <content type="html"><![CDATA[<p><strong>View the <a href="http://railsgrammer.com/2013/02/sub-directory-rails-app-part-2/">Sub Directory Rails App – Part 2</a></strong> post for an update on this topic. I have recently had the pleasure of serving a rails application where the root url is a subdirectory so that instead of <code>myapp.company.com</code> or <code>myapp.com</code> it is <code>company.com/myapp</code>. The web is full of guides for how to do this, but I <strong>did not</strong> find a guide that was specific to <strong>Nginx, Unicorn, Ruby 1.9.3, and Rails 3</strong>. <strong>You can view all files to configure this by <a href="https://gist.github.com/4422617" title="Coffeencoke Gist" target="_blank">viewing this gist</a>.</strong> First, you must be serving your unicorn workers using a unicorn socket. Point your Nginx configuration to use the unicorn sock</p>

<pre line=1>upstream unicorn_socket_for_myapp {
  server unix:/home/coffeencoke/apps/myapp/current/tmp/sockets/unicorn.sock fail_timeout=0;
}
</pre>

<p>Next, setup your Nginx config to receive requests for the domain your app will be within:</p>

<pre line=1>server {
  listen          80;
  server_name     coffeencoke.com www.coffeencoke.com;
}
</pre>

<p>Then, add a location block for the subdirectory you want your rails app to live. This should go inside of the server block.</p>

<pre># If static file exists, load directly from Nginx, bypass Rails
  # Otherwise, pass request off to unicorn proxy
  location /myapp/ {
    try_files $uri @unicorn_proxy;
  }
 
  location @unicorn_proxy {
    proxy_pass http://unix:/home/coffeencoke/apps/myapp/current/tmp/sockets/unicorn.sock;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_set_header X-Forwarded-Proto $scheme;
  }
</pre>

<p>Now you need to update your rails application so that it uses that subdirectory when generating urls and mapping to Actions and Controllers. Add a scope to your routes file like so:</p>

<pre>MyApp::Application.routes.draw do
  scope '/myapp' do
    root :to => 'registrations#new'
    
    # other routes are always inside this block
    # ...
  end
end
</pre>

<p>Your rails app will now map to</p>

<p><code>/myapp/registrations/new</code>, instead of <code>/registrations/new</code> The problem however, is that when I am developing I do not want to write dependencies on this path structure, in case the application some day is not in a sub domain, also because it's annoying. Therefor, I created a module and included it into the routes file and used it like so:</p>

<pre>require_relative '../lib/route_scoper'
 
MyApp::Application.routes.draw do
  scope RouteScoper.root do
    root :to => 'registrations#new'
    
    # other routes are always inside this block
    # ...
  end
end
</pre>

<p>the module looks like this:</p>

<pre>require 'rails/application'
 
module RouteScoper
  def self.root
    Rails.application.config.root_directory
  rescue NameError
    '/'
  end
end
</pre>

<p>Pretty simple, if the environment has configured a specific root directory, then use that, otherwise, use '/', which is the same as not specifying anything. Now in my config/environments/production.rb file I have the following:</p>

<pre>MyApp::Application.configure do
  # Contains configurations for the production environment
  # ...
  
  # Serve the application at /myapp
  config.root_directory = '/myapp'
end
</pre>

<p>And in my config/environments/development.rb file, I do not specify</p>

<p><code>config.root_directory</code> so that it uses the normal url root.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Versioning Your API's]]></title>
    <link href="http://coffeencoke.com/blog/2012/05/25/versioning-your-apis/"/>
    <updated>2012-05-25T00:00:00-05:00</updated>
    <id>http://coffeencoke.com/blog/2012/05/25/versioning-your-apis</id>
    <content type="html"><![CDATA[Versioning can be a random number or can be something that makes your release process fun.  The version format that I like to use, and have found works best, is Major.Minor.Patch (ie. 1.3.2).

<h2>Major</h2>

Significant enhancement, addition, or update that breaks backward compatibility with the previous major release.

<h2>Minor</h2>

Smaller enhancement, addition, or update that does not break backward compatibility with the current major release.

<h2>Patch</h2>

Bug fix.

<hr />

There are many reasons versioning is important, but just to name a few that have been real for me in the past are: Planning, and API's for mobile applications.

A version number is a contract.  A contract that states, you, the client, using me, the library, can upgrade me as much as you want and I guarantee that I will not break your code as long as you stay within the same major release number.  That's as simple as it gets.

Let's see an example perhaps?

"Awesome API" is at version 1.0.0 and the "Great Mobile App" decides to use the "Awesome API".  Meanwhile, the developers of "Awesome API" are hard at work making it even more awesome.  They're receiving bug reports, enhancement requests, feature suggestions and are planning satisfying all of their customers.  There are a few rules that we must understand:

1. Bugs must be fixed as soon as possible
2. Enhancements should be released as soon as they are "feature" complete and shippable
3. Some enhancements will break the current API.

<strong>Major.Minor.Patch</strong> allows you to satisfy all three of those points.

<h2>Planning</h2>

While planning out what tasks, which I will refer to as stories, you and your team will be developing, often it gets a bit hairy.  By hairy, I mean, you have priorities, but how good are those priorities?  In the end it just seems a bit like eating an early breakfast.  And no, you're not really supposed to know what I mean by that, it's just the only way I can explain the feeling.

When you have your stories categorized over a the 3 versioning types by creating milestones for each version type.  Let's say that you just released your application! Yay, good day, you are at 1.0.0.  As you plan for the next coming iterations of work, you will end up coming up with a pretty decent amount of stories.  The problem is that the developer sees bugs and knows that they NEED fixed, but the business team who mostly drive the priorities of the project think they can just move on to newer and better features without taking head to the bugs that have popped up, because there are no bugs right?  Right.

So, by separating your stories into feature and bug, you now are able to clearly see how many bugs there are, how many are really important and you can come to an agreeable amount of bugs that need to be done.  It's easier to do a balanced approach.

Current: 1.0.0
Milestones: 1.0.1, 1.1.0, 2.0.0

As you write issues, place them in these milestones.  Is this a bug? Is this an enhancement or addition?  Will this break the current API?

<h2>API's for Clients</h2>

Any client using your API needs to know if they can upgrade safely in case there are some bugs that have been fixed.  Providing this version format satisfies this concern.

<h2>Inspiration</h2>

<ul><li> experience</li>
<li><a href='http://rubyrogues.com/037-rr-versioning-and-releases/'>Ruby Rogues</a></li></ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phone Gap Whitelist Rejection Error]]></title>
    <link href="http://coffeencoke.com/blog/2012/01/19/phone-gap-whitelist-rejection-error/"/>
    <updated>2012-01-19T00:00:00-06:00</updated>
    <id>http://coffeencoke.com/blog/2012/01/19/phone-gap-whitelist-rejection-error</id>
    <content type="html"><![CDATA[My mobile app continues.  As I was testing my registration API through the iOS emulator I got the following error:
<pre>MyApp [97185:15603] ERROR whitelist rejection: url='http://localhost:3000'</pre>
After some quick google searching, I discovered that in order to make requests outside of the file system I had to add the host to the phone gap's plist file.  For my project this file is located at <code>/MyApp/PhoneGap.plist</code>.  You can either edit this file with a text editor or edit it in Xcode.  The end result for me to be able to hit localhost within the app looks like this:
<pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
...
&lt;key&gt;ExternalHosts&lt;/key&gt;
&lt;array&gt;
&lt;string&gt;localhost&lt;/string&gt;
&lt;/array&gt;
...</pre>
After I made that change, I restarted my app through Xcode and the app was able to hit the rails server.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Never a fun error: Access-Control-Allow-Origin]]></title>
    <link href="http://coffeencoke.com/blog/2012/01/19/never-a-fun-error-access-control-allow-origin/"/>
    <updated>2012-01-19T00:00:00-06:00</updated>
    <id>http://coffeencoke.com/blog/2012/01/19/never-a-fun-error-access-control-allow-origin</id>
    <content type="html"><![CDATA[If you are testing any javascript app against a web service and you run into the following error in your javascript console:

XMLHttpRequest cannot load <a title="http://localhost:3000/" href="http://localhost:3000/" target="_blank">http://localhost:3000/</a>. Origin <a title="http://guru_weight.dev" href="http://guru_weight.dev/">http://myapp.dev</a> is not allowed by Access-Control-Allow-Origin.

In this context it means that the host your are making the request from does not have permission to access the requested resource (<a href="http://www.w3.org/TR/cors/" target="_blank">it also means a lot of other things</a>).  After hunting you can do a at least 2 things:

1. Add the host to the access list by adding to the request header (http://enable-cors.org/)

2. Load the app using file:/// rather than the host.

Because I was writing this app as a native mobile app for iOS, Android, etc. I found out that PhoneGap loads the html files using the file:/// protocol.  So now, when I am developing on my computer, as long as I use the file:/// protocol, I have no problem with access to my API.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cucumber and iOS - one step at a time]]></title>
    <link href="http://coffeencoke.com/blog/2011/11/06/cucumber-and-ios-one-step-at-a-time/"/>
    <updated>2011-11-06T00:00:00-05:00</updated>
    <id>http://coffeencoke.com/blog/2011/11/06/cucumber-and-ios-one-step-at-a-time</id>
    <content type="html"><![CDATA[I have begun writing my first iOS application.  I come from a ruby background and for the past 2 years I have written everything test first starting with cucumber scenarios all the way down to unit tests.  The problem with starting a brand new language for me is I wanted to dive straight in to writing the production code.

WRONG.

That would not be test driven and the very fact that I wanted to do that made me throw out my core principles of writing solid quality software.

So I started looking into how I could write Acceptance Tests or Integration tests to drive my development and ultimately drive my learning of how to write an iOS application.

After browsing for a bit I found <a href="https://github.com/unboxed/icuke" target="_blank">iCuke</a> which was quite out of date.  If you look at the github page for this app it has not been touched since June 30, 2010! So I browsed a bit more and found <a href="https://github.com/moredip/Frank" target="_blank">Frank</a> which was updated a blazing 3 days ago!  Much better.

So, keep in mind that I have absolutely zero amount of knowledge on how to write an iOS application.  The tutorial for setting up Frank for an iOS application was point blank easy.  Follow the guide at this tutorial and you'll be good to go.  There is also <a href="http://vimeo.com/27691115" target="_blank">this video</a> that steps through that guide so you can visually double check that you set it up correctly!

How great is that!?

So far I am very excited to work on this application, I was bummed thinking that I will not be able to apply my core principles of a software craftsman for a new language but having found Frank, I will be able to drive my learning by writing very high level test scenarios for what I want to learn.  One step at a time.

The only addition I made is because I am from a ruby development background I used <a href="http://beginrescueend.com/" target="_blank">rvm</a> and <a href="http://gembundler.com/" target="_blank">bundler</a> to manage the gem.  The instruction in the tutorial is to run the following:

<code>$ sudo gem install frank-cucumber</code>

To do it the current way.  Use bundler (view the bundler website or view some of my bundler articles on how to get running with bundler).  The quick addition I made is to add a file named .rvmrc at the project root with the following content:

<code>rvm use 1.9.2@my_great_ios_app --create</code>

create a file named Gemfile with the following content:

<code> source :rubygems
</code><span style="font-family: monospace;">gem 'frank-cucumber'</span>

open a new shell or cd out of the directory and back in to accept the rvmrc file

<code> $ cd ..
$ cd -
</code>

Read and approve the instructions to accept the rvmrc file.  Basically it will just create a gem set named my_great_ios_app within my ruby 1.9.2 installation.  After that, install the gems:

<code>$ bundle install </code>

Now that this is completed, you will not have any other gems for this project except what it needs and you will not have any gems for any other project except for what those projects need.  Excellent way to have multiple projects on multiple versions of ruby and still be able to manage the gems at the application level.

Keep checking in to see more articles on how I am learning how to write an iOS application.  If you have any comments, questions or suggestions, please drop me a comment or email.  I'd love to hear from you.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Midwest Conf - Day 1 Part 1]]></title>
    <link href="http://coffeencoke.com/blog/2011/11/04/ruby-midwest-conf-day-1-part-1/"/>
    <updated>2011-11-04T00:00:00-05:00</updated>
    <id>http://coffeencoke.com/blog/2011/11/04/ruby-midwest-conf-day-1-part-1</id>
    <content type="html"><![CDATA[So far the day has been filled with great pastries, excellent coffee, typically frustrated conference wifi, and fantastic talks about Ruby and craftsmanship.

The day started off with the why you should not use sudo, for most things.  Your ruby development computer should be setup using a number of tools that should not be installed with sudo, simply because with most if the tools, they can’t.  Your development environment should be isolated in your profile, one step deeper though; isolated in your project.

<strong>Use RVM .</strong>
<strong> Ro</strong>

RVM is a ruby version master (err, manager).  It allows you to install multiple versions of Ruby, JRuby, Rubinius, etc. on the same computer.  Further yet, it allows you to have completely separate gems for each project by using gemsets.

<strong>The Ruby Safari
Ola</strong>

Ola did a great job throwing out some technical intricacies which really pushed me to get to know my language more.  As I develop using Ruby I use and reuse the same methods and classes.  His talk has encouraged me to look into deeper implementation of Ruby and to ‘play’ with creative patterns.

One thing I particularly liked is commenting and writing Regular Expressions with group names.  However, the big bang from his talk for me was requiring a fake library.  I am constantly growing and learning (trying to) and one place I have been focusing on is speed of tests and design of tests, unit tests to be more specific.  With rails, it is very difficult to write true unit specs that are blazing fast.  More to come on this in future posts.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac Issue: AELWriter Permission denied]]></title>
    <link href="http://coffeencoke.com/blog/2011/02/07/mac-issue-aelwriter-permission-denied/"/>
    <updated>2011-02-07T00:00:00-06:00</updated>
    <id>http://coffeencoke.com/blog/2011/02/07/mac-issue-aelwriter-permission-denied</id>
    <content type="html"><![CDATA[<p>When I was inserting a new Product Serial Number for Adobe Aperture after migrating Aperture from another computer via that mac osx migration assistant.  Apperture will spin the dreadful spinning wheel of death and spit out this in the Console:</p>
<pre>
<div id="_mcePaste">2/6/11 9:19:24 PM	com.apple.launchd[1]	com.apple.launchd	(com.apple.aelwriter[1230]) posix_spawn("/usr/sbin/AELWriter", ...): Permission denied</div>
<div id="_mcePaste">2/6/11 9:19:24 PM	com.apple.launchd[1]	com.apple.launchd	(com.apple.aelwriter[1230]) Exited with exit code: 1</div>
<div id="_mcePaste">2/6/11 9:19:24 PM	com.apple.launchd[1]	com.apple.launchd	(com.apple.aelwriter) Throttling respawn: Will start in 2 seconds</div>
2/6/11 9:19:24 PM	com.apple.launchd[1]	com.apple.launchd	(com.apple.aelwriter[1230]) posix_spawn("/usr/sbin/AELWriter", ...): Permission denied2/6/11 9:19:24 PM	com.apple.launchd[1]	com.apple.launchd	(com.apple.aelwriter[1230]) Exited with exit code: 12/6/11 9:19:24 PM	com.apple.launchd[1]	com.apple.launchd	(com.apple.aelwriter) Throttling respawn: Will start in 2 seconds
</pre>

<p>
The fix is found here:
</p>
<p>
<a href='http://support.apple.com/kb/TS3519' target='_blank'>Apple Support Fix</a>
</p>
happy fixing.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDb vs PostgreSQL]]></title>
    <link href="http://coffeencoke.com/blog/2010/11/23/mongodb-vs-postgresql/"/>
    <updated>2010-11-23T00:00:00-06:00</updated>
    <id>http://coffeencoke.com/blog/2010/11/23/mongodb-vs-postgresql</id>
    <content type="html"><![CDATA[Requestful Thinking

Been having discussions about the use of MongoDB and PostgreSQL.  Has anyone come across any benchmarks for these 2.  We've been making a lot of benchmarks using MongoDB with a solution we need, the difference is not a magnitude off from other db's.  I love mongodb but also have had a love for sql oriented database in the past.

I would love to hear what others feel about non sql based databases in certain application solutions.

What are your thoughts on...

<a href="http://railsgrammer.com/wp-content/uploads/2010/10/mongo-db-huge-logo.png"><img class="alignnone size-medium wp-image-48" title="mongo-db-huge-logo" src="http://railsgrammer.com/wp-content/uploads/2010/10/mongo-db-huge-logo-300x100.png" alt="" width="300" height="100" /></a>

and

<a href="http://railsgrammer.com/wp-content/uploads/2010/11/postgresql.jpg"><img class="alignnone size-medium wp-image-51" title="postgresql" src="http://railsgrammer.com/wp-content/uploads/2010/11/postgresql-300x103.jpg" alt="" width="300" height="103" /></a>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 3 Finally]]></title>
    <link href="http://coffeencoke.com/blog/2010/07/08/rails-3-finally/"/>
    <updated>2010-07-08T00:00:00-05:00</updated>
    <id>http://coffeencoke.com/blog/2010/07/08/rails-3-finally</id>
    <content type="html"><![CDATA[<p>To setup a new rails 3 app with cucumber, no prototype and mysql database using ruby 1.9.2</p>
<p>This guide assumes you have ruby 1.9.2, rubygems and bundler gem installed</p>
<pre>[msimpson@dakota ~] $ mkdir rails3
[msimpson@dakota ~] $ cd rails3
[msimpson@dakota rails3] $ git clone git://github.com/rails/rails.git rails3 .
[msimpson@dakota rails3] (master) $ ruby bin/rails new /path/to/my/new/app --dev -d mysql -J
[msimpson@dakota rails3] $ cd /path/to/my/new/app</pre>
</pre>
<p>Open and edit Gemfile so that it looks like this:</p>
<pre>source 'http://rubygems.org'

gem 'rails', :path =&gt; '/Users/mattsimpson/Projects/_resources/Code/Rails3'
gem 'arel',  :git =&gt; 'git://github.com/rails/arel.git'
gem 'mysql'

group :cucumber do
  gem 'cucumber-rails'
  gem 'cucumber'
  gem 'factory_girl'
  gem 'webrat'
  gem 'ruby-debug19'
end</pre>
<p>Install your gems</p>
<pre>[msimpson@dakota rails3] $ bundle install</pre>
<p>Install Cucumber with webrat and test unit</p>
<pre>[msimpson@dakota rails3] $ rails generate cucumber:install --webrat --testunit</pre>
<p>Open and edit config/database.yml and create your database by running the following:</p>
<pre>[msimpson@dakota app] $ rake db:create:all</pre>
<p>You are good to go!</p>
<br />
<br />
<p>Originally I was having troubles with rake test and rake cucumber, but after recreating my rails app this way it all worked great.  Hope it works for you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 3 Updates]]></title>
    <link href="http://coffeencoke.com/blog/2010/07/07/rails-3-updates/"/>
    <updated>2010-07-07T00:00:00-05:00</updated>
    <id>http://coffeencoke.com/blog/2010/07/07/rails-3-updates</id>
    <content type="html"><![CDATA[In this I will explore and solve issues I had in upgrading rails 3 to the latest rails 3 version.

Following the rails 3 update saga continues.  After taking a break to make some leaps in the design process on an application, I came back to programming the app.  After writing some cucumber tests I received a series of deprecated messages.  One thing I would like to note is that rails 3 is very good at letting you know what is going on and what you need to do.  Let's get started:

My gemfile for cucumber looks like this:
<pre>group :cucumber do
  gem 'capybara'
  gem 'database_cleaner'
  gem 'cucumber-rails'
  gem 'cucumber'
  gem 'spork'
  gem 'launchy'    # So you can do Then show me the page
  gem 'factory_girl'
  gem 'webrat'
end</pre>
When I tried to run my cucumber test I got this message:  "undefined method `config' for nil:NilClass (NoMethodError)"

So I updated my gems via bundle:
<pre>
<pre>[msimpson@dakota Code] $ bundle install</pre>
</pre>
and I got the message:
<pre>No compatible versions could be found for required dependencies:
Conflict on: "bundler":
* bundler (0.9.25) activated by bundler (= 0.9.25, runtime)
* bundler (&gt;= 1.0.0.beta.2, runtime) required by rails (&gt;= 0, runtime)
All possible versions of origin requirements conflict.</pre>
so I installed the new bundler
<pre>[msimpson@dakota Code] $ sudo gem install bundler -v 1.0.0.beta.2</pre>
reran the cucumbers and got this:
<pre>
<pre>    Rails 3 doesn't officially support Ruby 1.9.1 since recent stable
    releases have segfaulted the test suite. Please upgrade to Ruby 1.9.2
    before Rails 3 is released!
    You're running
      ruby 1.9.1p378 (2010-01-10 revision 26273) [i386-darwin10.3.0]</pre>
so I noticed I needed to install the new ruby 1.9.2 release candidate.  Since I use rvm I had to update rvm, remove my old ruby 1.9.2, re-install it and reinstall bundler:
<pre>[msimpson@dakota Code] $rvm update
[msimpson@dakota Code] $rvm reload
[msimpson@dakota Code] $rvm remove 1.9.2
[msimpson@dakota Code] $rvm install 1.9.2
[msimpson@dakota Code] $rvm use 1.9.2
[msimpson@dakota Code] $sudo gem install bundler -v 1.0.0.beta.2
[msimpson@dakota Code] $ bundle install</pre>
I didn't get all the way through but I'm pretty sure I got closer ;), currently I'm working on getting cucumber to install and run.  Hope this helps, if anyone gets any further let me know.</pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 3 update]]></title>
    <link href="http://coffeencoke.com/blog/2010/05/25/rails-3-update/"/>
    <updated>2010-05-25T00:00:00-05:00</updated>
    <id>http://coffeencoke.com/blog/2010/05/25/rails-3-update</id>
    <content type="html"><![CDATA[<div id="_mcePaste">Took me a few tweeks to get rails 3 working on my mac.  Recently I've made some posts to get your setup ready for Rails 3 but have just recently, with the tweeks I'm going to share here, now got rails 3 working with mysql.</div>
I've had to revert from ruby 1.9.2-preview to ruby 1.9.1 p378.
<pre>[msimpson@dakota Code] (master) $ rvm install 1.9.1
[msimpson@dakota Code] (master) $ rvm use 1.9.1
<span style="font-family:Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;line-height:19px;white-space:normal;font-size:13px;">Install rails 3 with the new ruby install</span>
[msimpson@dakota Code] (master) $ sudo gem install rails --prerelease</pre>
Create a new rails app using mysql
<pre><span style="font-family:Consolas, Monaco, 'Courier New', Courier, monospace;line-height:18px;font-size:12px;white-space:pre;">[msimpson@dakota Code] (master) $ </span>rails myapp --edge -d mysql</pre>
Now you will be able to create your db and start your app
<pre style="font:normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace;">[msimpson@dakota Code] (master) $ rake db:create:all
[msimpson@dakota Code] (master) $ rails server</pre>
<pre style="font:normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace;"></pre>
<pre style="font:normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace;">Yay!!  Rails 3, here we go!</pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starting Rails 3 with Ruby 1.9.2]]></title>
    <link href="http://coffeencoke.com/blog/2010/05/22/starting-rails-3-with-ruby-1-9-2/"/>
    <updated>2010-05-22T00:00:00-05:00</updated>
    <id>http://coffeencoke.com/blog/2010/05/22/starting-rails-3-with-ruby-1-9-2</id>
    <content type="html"><![CDATA[<div id="_mcePaste">First things first, if you are going to run rails 3 you may as well us ruby 1.9.x.  The problem however is that rails 3 currently does not work well with ruby 1.9.1 so you must first install and use ruby 1.9.2.</div>
<div id="_mcePaste">I'm installing ruby 1.9.2 using RVM, ruby version manager.  You can read up on how to use this from me <a href="/2010/04/17/get-mac-osx-snow-leopard-edged-for-ruby-on-rails-3-0-part-1/" target="_blank">earlier blog post</a></div>
<pre>[msimpson@dakota Code] (master) $ rvm install 1.9.2
[msimpson@dakota Code] (master) $ rvm use 1.9.2</pre>
<div id="_mcePaste">now if you go into irb you will see that you are using ruby 1.9.2 and you can use the new cool methods.</div>
<pre>[msimpson@dakota Code] (master) $ irb
&gt; RUBY_VERSION
=&gt; "1.9.2"
&gt; hash = { :first =&gt; "the first value", :second =&gt; "the second value" }
=&gt; {:second=&gt;"the second value", :first=&gt;"the first value"}
&gt; hash.each_with_index.collect{|array, index| "key: #{array[0]} | value: #{array[1]} | index: #{index}"}
=&gt; ["key: second | value: the second value | index: 0", "key: first | value: the first value | index: 1"]</pre>
<div id="_mcePaste">Install Rails 3</div>
<pre>[msimpson@dakota Code] (master) $ sudo gem install rails --prerelease</pre>
<div id="_mcePaste">Create a new rails 3 app strait from the rails 3 git repository so that you can always pull new updates as bugs get fixed</div>
<pre>[msimpson@dakota Code] (master) $ rails . --edge</pre>
<div id="_mcePaste">Obviously, you can specify the rails app name, but I was already in the directory I wanted to be in so I used .</div>
<div id="_mcePaste"></div>
<div>Now you are good to go!  Have fun and report any bugs you find with Rails 3, or fork it and fix it so you can contribute.</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Media Server - The Groundwork]]></title>
    <link href="http://coffeencoke.com/blog/2010/04/26/linux-media-server-the-groundwork/"/>
    <updated>2010-04-26T00:00:00-05:00</updated>
    <id>http://coffeencoke.com/blog/2010/04/26/linux-media-server-the-groundwork</id>
    <content type="html"><![CDATA[<h2>What I'm Looking For</h2>
<h3>Use</h3>
<div id="_mcePaste">I want to have speakers and monitors / tv's throughout my house with access control points throughout it to play all varieties of media for that particular area.  These control points will be cost effective computers with small displays to control playback for the use of that area.  These control devices could be a desktop, laptop, iPhone, iPod, iPad, tablet, etc.  My most treasured audio and video software for my clients is iTunes and for photo is iphoto.</div>
<h3>Management</h3>
<div id="_mcePaste">I would like to be able to easily add and retrieve files to the central media server, which would include all types of video, photo and audio files.</div>
<h3>Accessibility</h3>
<div id="_mcePaste">I want to access the files for their particular use on all platforms, Windows, Mac OSX, Linux, iPhone, iPad, etc.</div>
<h3>Growth</h3>
<div id="_mcePaste">As technology advances and as the devices I acquire grow with the advancement I want the software to support new technologies.</div>
<h2>Firefly</h2>
<div id="_mcePaste"><em>Website: <a href="http://www.fireflymediaserver.org" target="_blank">http://www.fireflymediaserver.org</a></em></div>
<h3>Features</h3>
<div id="_mcePaste">
<ul>
	<li>Unix or Linux, Windows (Beta), and soon to support Mac OSX</li>
	<li>OGG, FLAC, Apple Lossless, WMA (Beta) and streaming radio stations</li>
	<li>Configurable for web access</li>
	<li>Smart playlists (Beta), iTunes Playlists</li>
	<li>iTunes</li>
	<li>Active community</li>
	<li>Open Source, it's free!</li>
</ul>
</div>
<h3>Accommodation</h3>
<div id="_mcePaste">This seems to be a great fit for serving audio files to the clients and it supports iTunes.  Beta version supports all thick client platforms, I do not see support for iPhone, iPod or iPad.</div>
<h3>Draw backs / Things to consider</h3>
<div id="_mcePaste">From glancing at the documentation and wiki Firefly seems to be strictly command line configured.  Which would be fine because I happen to be savvy in command line but would like a gui interface to manage the configuration more easily.  However there is a web based configuration interface, once it's installed and configured via command line.</div>
<div id="_mcePaste">Remnants of dropping windows support is in the forums.</div>
<h3>Above and Beyond</h3>
<div id="_mcePaste">Firefly can be configured to stream over the web.</div>
<h2>MediaTomb</h2>
<div id="_mcePaste"><em>Website: <a href="http://mediatomb.cc" target="_blank">http://mediatomb.cc</a></em></div>
<h3>Features</h3>
<div id="_mcePaste">
<div id="_mcePaste">
<ul>
	<li>Uses UPnP</li>
	<li>mp3, ogg, flac, jpeg, etc. files.</li>
	<li>Meta extraction</li>
	<li>Thumbnail support</li>
	<li>Both audio and video support</li>
	<li>Automatic directory rescans</li>
	<li>Plugin support</li>
	<li>Web UI</li>
	<li>Supports external URL's for internet sources</li>
	<li>Custom scripting capabilities</li>
	<li>Support for Linux, FreeBSD, Mac OS X</li>
</ul>
</div>
</div>
<h3>Accommodation</h3>
<div id="_mcePaste">Serves audio and video files, allows plugin support for adding new file types as technology progresses, thumbnail support would be nice, automatic directory scans would make it easy to update and manage the files, custom scripting is a nice feature (since I'm a geek).</div>
<h3>Draw backs / Things to consider</h3>
<div id="_mcePaste">No support for Windows, which is fine since that was a minor requirement of mine.  Has a lot of dependencies.</div>
<h3>Above and Beyond</h3>
<div id="_mcePaste">Custom scripting would be very useful, you can create a script to present your files as Music, Audio, Podcast, Movies, Other Videos, Photos, non-playable files such as documents or pdf's.  You can even make a script to import a DVD.</div>
I am looking forward to trying the two out, if you have any recommendations please throw them in the comments, I've decided to try these 2 out and if they do not satisfy I will look in to more options.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remove All Your Ruby Gems]]></title>
    <link href="http://coffeencoke.com/blog/2010/04/17/remove-all-your-ruby-gems/"/>
    <updated>2010-04-17T00:00:00-05:00</updated>
    <id>http://coffeencoke.com/blog/2010/04/17/remove-all-your-ruby-gems</id>
    <content type="html"><![CDATA[<div id="_mcePaste">When it gets to a point to wipe out all of your gems just because you feel cluttered and you want to start fresh, this is what I did.</div>
<div id="_mcePaste">I had over 60 megabytes of gems and it was driving me kinda crazy because of my CDO.  So I wanted to remove all my gems and start fresh.</div>
<div id="_mcePaste"></div>
<pre>[msimpson@dakota test] $ sudo gem uninstall --all --ignore-dependencies `sudo gem list --no-versions`</pre>
<div id="_mcePaste"></div>
<div id="_mcePaste">Press return whenever prompted and you'll end up nothing :)  ahhhh feels nice.</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get Mac OSX Snow Leopard edged for Ruby on Rails 3.0 - part 1]]></title>
    <link href="http://coffeencoke.com/blog/2010/04/17/get-mac-osx-snow-leopard-edged-for-ruby-on-rails-3-0-part-1/"/>
    <updated>2010-04-17T00:00:00-05:00</updated>
    <id>http://coffeencoke.com/blog/2010/04/17/get-mac-osx-snow-leopard-edged-for-ruby-on-rails-3-0-part-1</id>
    <content type="html"><![CDATA[First, why should you want to upgrade?
<blockquote>Ruby 1.9 is a new series of Ruby. It is modern, faster, with clearer syntax, multilingualized, a much improved version of Ruby.</blockquote>
<ol>
	<li>1.8 has been used since 2003, I think it's time for a new version</li>
	<li>Ruby 1.9 is is <a href="http://antoniocangiano.com/2007/12/03/the-great-ruby-shootout/" target="_blank">over 3 times faster</a> than ruby 1.8.6 see it for yourself</li>
	<li>New methods</li>
	<li>Better syntax</li>
	<li>New classes</li>
</ol>
* read this <a href="http://eigenclass.org/hiki/Changes+in+Ruby+1.9" target="_blank">great read up</a> on ruby 1.9
<h2>Install ruby 1.9.1 fresh</h2>
<address>(to upgrade skip this and see below)</address>
<h3>Download</h3>
<pre>[msimpson@dakota ~] $ mkdir src
[msimpson@dakota src] $ cd src
[msimpson@dakota src] $ curl -Ov ftp://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.1-p376.tar.gz
[msimpson@dakota src] $ curl -Ov http://files.rubyforge.vm.bytemark.co.uk/rubygems/rubygems-1.3.6.tgz</pre>
<h3>Unpack, Make and Install Ruby</h3>
<pre>[msimpson@dakota src] $ tar -xzvf ruby-1.9.1-p376.tar.gz
[msimpson@dakota src] $ cd ruby-1.9.1-p376
[msimpson@dakota src] $ autoconf
[msimpson@dakota src] $ ./configure --enable-shared --enable-pthread CFLAGS=-D_XOPEN_SOURCE=1 &amp;&amp; make &amp;&amp; sudo make install
[msimpson@dakota src] $ cd ..</pre>
<h3>Unpack and Install Rubygems</h3>
<pre>[msimpson@dakota src] $ tar xzvf rubygems-1.3.6.tgz
[msimpson@dakota src] $ cd rubygems-1.3.6
[msimpson@dakota src] $ sudo /usr/local/bin/ruby setup.rb
[msimpson@dakota src] $ cd ..</pre>
<h2>Or to upgrade</h2>
<h3>Download</h3>
I use the rvm gem, it freaking rocks!  It manages the versions of ruby to use.
<pre>gem install rvm
rvm-install</pre>
Follow the instructions at the end of the last command then close and open a new terminal.
<h3>Install ruby 1.9.1 and use it</h3>
<pre>[msimpson@dakota ~] $ rvm install ruby-1.9.1-p378
[msimpson@dakota ~] $ rvm use 1.9.1</pre>
<h3>Check to see that it is installed</h3>
<pre>[msimpson@dakota ~] $ ruby -v
ruby 1.9.1p378 (2010-01-10 revision 26273) [i386-darwin10.3.0]</pre>
*check out the website for rvm to see what kinds of ruby you can install (ie jruby, 1.9.2, etc.)

if all goes wrong down the road you can always switch to default
<pre>[msimpson@dakota ~] $ rvm use default</pre>
<h2>Play Around</h2>
Now that you have ruby 1.9 installed you can use some pretty rad new methods.

one of my favorites is Hash#each_with_index:
<pre>[msimpson@dakota ~] $ rvm use 1.9.1
[msimpson@dakota ~] $ irb
ruby-1.9.1-p378 &gt; hash = {:name =&gt; 'matt', :verb =&gt; "loves", :noun =&gt; "ruby 1.9" }
 =&gt; {:name=&gt;"matt", :verb=&gt;"loves", :noun=&gt;"ruby 1.9"}
ruby-1.9.1-p378 &gt; hash.each_with_index{|value, index| print "index: #{index}, key: #{value[0]}, value: #{value[1]}\n" }
index: 0, key: name, value: matt
index: 1, key: verb, value: loves
index: 2, key: noun, value: ruby 1.9
 =&gt; {:name=&gt;"matt", :verb=&gt;"loves", :noun=&gt;"ruby 1.9"}</pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing a Business Plan]]></title>
    <link href="http://coffeencoke.com/blog/2009/06/20/writing-a-business-plan/"/>
    <updated>2009-06-20T00:00:00-05:00</updated>
    <id>http://coffeencoke.com/blog/2009/06/20/writing-a-business-plan</id>
    <content type="html"><![CDATA[<div style="border-style:none none solid;border-width:medium medium 1pt;padding:0 0 4pt;">
<p class="MsoTitle">Notes on Writing a Business Plan</p>

</div>
<p class="MsoNormal">3 Main functions of a business plan:</p>
<p class="MsoListParagraphCxSpFirst" style="text-indent:.25in;"><!--[if !supportLists]--><span><span>1.<span style="font-family:'Times New Roman';font-style:normal;font-variant:normal;font-weight:normal;font-size:7pt;line-height:normal;"> </span></span></span><!--[endif]-->A communications tool which conveys your ideas, research and plans to others.</p>
<p class="MsoListParagraphCxSpMiddle" style="text-indent:.25in;"><!--[if !supportLists]--><span><span>2.<span style="font-family:'Times New Roman';font-style:normal;font-variant:normal;font-weight:normal;font-size:7pt;line-height:normal;"> </span></span></span><!--[endif]-->A basis on which to manage your business.</p>
<p class="MsoListParagraphCxSpLast" style="text-indent:.25in;"><!--[if !supportLists]--><span><span>3.<span style="font-family:'Times New Roman';font-style:normal;font-variant:normal;font-weight:normal;font-size:7pt;line-height:normal;"> </span></span></span><!--[endif]-->A yardstick by which you may measure progress and evaluate changes.</p>
<p class="MsoNormal">Essential Elements:</p>
<p class="MsoListParagraphCxSpFirst" style="text-indent:.25in;"><!--[if !supportLists]--><span><span>1.<span style="font-family:'Times New Roman';font-style:normal;font-variant:normal;font-weight:normal;font-size:7pt;line-height:normal;"> </span></span></span><!--[endif]-->Your business concept:<span> </span>Most important page.<span> </span>Presents a summary of your business idea.<span> </span>It tells why you think it will work, how it fits into the marketplace, what the future should hold.<span> </span>All based on your best research.</p>
<p class="MsoListParagraphCxSpMiddle" style="text-indent:.25in;"><!--[if !supportLists]--><span><span>2.<span style="font-family:'Times New Roman';font-style:normal;font-variant:normal;font-weight:normal;font-size:7pt;line-height:normal;"> </span></span></span><!--[endif]-->Your product or service: provide a complete description of what you plan to sell or rent.<span> </span>If possible, include an 8x10 photograph.<span> </span>Emphasize the basic product or service that will provide the bulk of your income.<span> </span>Explain advantages and benefits and anything about your products or services that will help “sell” your business concept to a complete stranger.<span> </span>If your product is still on the drawing board, explain when it will be available, including any test data you have.</p>
<p class="MsoListParagraphCxSpMiddle" style="text-indent:.25in;"><!--[if !supportLists]--><span><span>3.<span style="font-family:'Times New Roman';font-style:normal;font-variant:normal;font-weight:normal;font-size:7pt;line-height:normal;"> </span></span></span><!--[endif]-->Your market: Explain the big picture first.<span> </span>What is the total universe of your market?<span> </span>Is the industry growing or declining? Is anything happening now or expected to happen in the future that will impact your business?<span> </span>Who are your competitors?<span> </span>How successful are they, and why?<span> </span>Do they have any weaknesses?<span> </span>If so, will your business fill a need created by their weakness?<span> </span>Who will your customers be? Why will they buy your product or service?</p>
<p class="MsoListParagraphCxSpMiddle" style="text-indent:.25in;"><!--[if !supportLists]--><span><span>4.<span style="font-family:'Times New Roman';font-style:normal;font-variant:normal;font-weight:normal;font-size:7pt;line-height:normal;"> </span></span></span><!--[endif]-->Your marketing strategy:<span> </span>Describe how your product or service will be sold.<span> </span>Include pricing strategy, estimated sales and market share for each of the first three years.<span> </span>Add your advertising and public relations plans, plus your service and warranty policies.</p>
<p class="MsoListParagraphCxSpMiddle" style="text-indent:.25in;"><!--[if !supportLists]--><span><span>5.<span style="font-family:'Times New Roman';font-style:normal;font-variant:normal;font-weight:normal;font-size:7pt;line-height:normal;"> </span></span></span><!--[endif]-->Your production plans.<span> </span>Cover all the specifics, such as how, where and whom your product will be produced.<span> </span>What is the raw material?<span> </span>Is it readily available?<span> </span>What is the manufacturing process?<span> </span>What is your anticipated rate of production?<span> </span>Will you use union or non-union labor?</p>
<p class="MsoListParagraphCxSpMiddle" style="text-indent:.25in;"><!--[if !supportLists]--><span><span>6.<span style="font-family:'Times New Roman';font-style:normal;font-variant:normal;font-weight:normal;font-size:7pt;line-height:normal;"> </span></span></span><!--[endif]-->Your personnel: Will yours be a sole proprietorship?<span> </span>A partnership? Corporation?<span> </span>If so, include an organizational chart.<span> </span>How many people are involved, and what are their skills?<span> </span>How well are they qualified? <span> </span>At what points in time will you add personnel?<span> </span>If you’re running a one-man show, explain convincingly how you have the necessary skills and talent to achieve your goals.</p>
<p class="MsoListParagraphCxSpLast" style="text-indent:.25in;"><!--[if !supportLists]--><span><span>7.<span style="font-family:'Times New Roman';font-style:normal;font-variant:normal;font-weight:normal;font-size:7pt;line-height:normal;"> </span></span></span><!--[endif]-->Your financial plans:<span> </span>If yours is a new business, you won’t have the benefit of past history.<span> </span>As a bare minimum, you will need a personal financial statement.<span> </span>If your business is already established, include a financial statement for the business.<span> </span>Demonstrate how you plan to elevate existing figures from point A to point B.<span> </span>Ideally, you will be totally familiar with all of the financial details of your business, and will be able to consider line by line how you arrived at each figure.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hotspots not working... Figured it out!]]></title>
    <link href="http://coffeencoke.com/blog/2009/06/18/hotspots-not-working-figured-it-out/"/>
    <updated>2009-06-18T00:00:00-05:00</updated>
    <id>http://coffeencoke.com/blog/2009/06/18/hotspots-not-working-figured-it-out</id>
    <content type="html"><![CDATA[<strong><em><a href="http://railsgrammer.com/wp-content/uploads/2009/06/wifi_yuck.png"><img class="alignleft size-full wp-image-15" style="border:0 none;margin:5px;" title="wifi_yuck" src="http://railsgrammer.com/wp-content/uploads/2009/06/wifi_yuck.png" alt="wifi_yuck" width="295" height="280" /></a>If you want to know how, just skip to the bottom :)</em></strong>

So I have been having issues where my <strong>macbook pro</strong> running Mac OSX 10.5 <strong>would not connect to hotspots</strong> at coffee shops, hotels and the like!  Very frustrating because <strong>it used to work</strong> and I could not figure out why it wouldn't work all of the sudden.  <strong>I could connect to the router</strong> and I received an IP Address but when I opened Firefox or Safari the landing page for that hotspot, you know: the page where you either enter a hotspot login or just click go, well, it never loaded.  It would time out :(

I am at a hotel in Penn State hoping to do some blogging and searching and a little research / unplugagoogling and really wanted to get this internet thing to work.  Luckily I had my iPhone and could browse with the 3G network and I had the patience (rare in times of needing internet).  So I browsed on my iphone while applied changes to my macbook pro.

The odd thing was that I could send / receive emails, login to my chat clients, load my dashboard data. <strong> I could ping but not browse</strong> in firefox or safari.  Yuck!

Looking at the logs in console didn't help, I removed my Cisco VPN Client because I read a few things about that client installing a kernal module that breaks that functionality, I opened up my firewall and all of this did not solve the issue.
<h2>Solution</h2>
Finally, I realized I installed <strong>Peer Guardian</strong>, which is a great application, but it was blocking all access for that landing page (I could see it blocking from the peer guardian log output).  So <strong>I disabled the Peer Guardian filters</strong> and refreshed google and vualah! <strong>it worked</strong> :)... now to figure out how to add this situation to the allow / exception list, a task for another day.

This may not be the solution for you, if it didn't work then hopefully it's at the very least some direction to get you moving toward the solution.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Be fast with Bash Aliases]]></title>
    <link href="http://coffeencoke.com/blog/2009/06/12/be-fast-with-bash-aliases/"/>
    <updated>2009-06-12T00:00:00-05:00</updated>
    <id>http://coffeencoke.com/blog/2009/06/12/be-fast-with-bash-aliases</id>
    <content type="html"><![CDATA[<img class="size-full wp-image-10 alignright" title="terminal_2" src="http://railsgrammer.com/wp-content/uploads/2009/06/terminal_2.png" alt="terminal_2" width="189" height="124" /><strong>How to use bash alias commands to your advantage</strong>

Using command line tools saves a developer an unbelievable amount of time.  The question is how do you save more time and increase your efficiency even more?

One of my favorite ways is one I've used a long time, by using bash aliases.  This post is directed to Mac OS X but may work with some linux distros as well, files are named differently.

How can this help you?  Lets say everytime you open a shell window you have to cd into a generally deep project directory like:
<blockquote>
<pre>/Users/mattsimpson/Clients/My\ Client/Web/Email\ Dispatch\ App/branches/0_8_0_1_ccd_migration</pre>
</blockquote>
This can be tedious and annoying very easily, especially if you like to keep your folder names standard english format like "My Client" rather than cammal case "MyClient" or "my_client", etc.

With Aliases we turn this:
<blockquote>
<pre>
<pre>[msimpson@dakota ~]$ cd /Users/mattsimpson/Clients/My\ Client/Web/Email\ Dispatch\ App/branches/0_8_0_1_ccd_migration</pre>
</pre>
</blockquote>
Into this
<blockquote>
<pre>[msimpson@dakota ~]$ email_dispatch_app</pre>
</blockquote>
which you can tab out after emai → [tab], that's jimmy johns fast.

<strong>How do I get there?</strong>

First, Open a terminal window and edit your <strong>.bash_login</strong> file (.bashrc for linux) with your favorite text editor:
<blockquote>
<pre>[msimpson@dakota ~]$ vi ~/.bash_login</pre>
</blockquote>
And <strong>Insert</strong> the following near the end of the file:
<blockquote>
<pre># Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
 . ~/.bash_aliases
fi</pre>
</blockquote>
<strong>Save</strong> and close.

Create a <strong>new file</strong>, let's name it <strong>.bash_aliases</strong> in your home directory:
<blockquote>
<pre>[msimpson@dakota ~]$ vi ~/.bash_aliases</pre>
</blockquote>
and <strong>insert</strong> the following into the first line of the newly created file, but replace the alias name (email_dispatch_app) with your desired command alias name and the command path (/Users/mattsimpson/Clients/My Client/Web/Email Dispatch App/branches/0_8_0_1_ccd_migration) with your desired command path...
<blockquote>
<pre>alias email_dispatch_app='cd /Users/mattsimpson/Clients/My\ Client/Web/Email\ Dispatch\ App/branches/0_8_0_1_ccd_migration'</pre>
</blockquote>
<strong>Save</strong> and close.

<strong>Execute</strong> the following command to <strong>reset your bash session</strong>:
<blockquote>
<pre>[msimpson@dakota ~]$ . ~/.bash_login</pre>
</blockquote>
You are now able to execute your command (email_dispatch_app) and it's <strong>tab completable!</strong> Go ahead and try it and see below for my list of aliases I have collected through the past couple years.
<blockquote>
<pre>[msimpson@dakota ~]$ email_dispatch_app</pre>
</blockquote>
<strong>Obviously</strong> you can see how this can speed up your development and allow you to <strong>focus on the things that matter</strong>, not on where you need to change directories, or that super long command that you always have to type in over and over.

Here is the list of aliases I have, feel free to contribute your aliases, I'd love to see how others are using aliases.

my .bash_aliases file:
<blockquote># General Use Aliases
alias l='ls -lh'
alias c='clear'
alias cx='chmod +x'
alias tree="find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'"

# Ruby / Ruby on Rails Aliases
alias cons='./script/console'
alias gen='./script/generate'
alias spec='./script/spec'
alias srv='./script/server -u'
function import_email { email_dispatch &amp;&amp; ./script/runner "IncomingEmailHandler.direct_mail(STDIN.read, '$1')"; }

# Project Directory Shortcuts
# ...
# a bunch of directory shortcuts
alias email_dispatch_app='cd /Users/mattsimpson/Clients/My\ Client/Web/Email\ Dispatch\ App/branches/0_8_0_1_ccd_migration'
# ...

# SSH Shortcuts
# ...
# a bunch of ssh commands so i don't have to remember users and ip addresses like:
alias sshenvion='ssh msimpson@xx.xx.xx.xxx'
# ...

# Services
alias mysqlservice='sudo /Library/StartupItems/MySQLCOM/MySQLCOM'
alias recover_scanner="cd /var/www/projects/cdops2/current/ &amp;&amp; sudo ./script/runner -e production "IncomingEmailHandler.recovery_scanner""
function mksvn { ssh msimpson@trogdor setupsvn.sh $1; }
# instead of
# $ svn checkout -m 'some svn message'
# you do
# $ svc some svn message
function svc { svn commit -m "'$*'"; }
function checkout { svn checkout svn+ssh://trogdor/var/svnroot/$1; }</blockquote>
My favorite is by far the srv and the svc commands.  Enjoy :)
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just getting started]]></title>
    <link href="http://coffeencoke.com/blog/2009/05/22/just-getting-started/"/>
    <updated>2009-05-22T00:00:00-05:00</updated>
    <id>http://coffeencoke.com/blog/2009/05/22/just-getting-started</id>
    <content type="html"><![CDATA[<p>The name&#8217;s Matt Simpson, I&#8217;m a soccer ninja, business connoisseur, music engineer and Ruby on Rails a holic.</p>

<p>Since this blog&#8217;s focus is toward Ruby on Rails I&#8217;m giving myself permission to allow this post a little freedom.</p>

<p>My Life, generally:</p>

<p>I was born in a small town and raised in a house in the country.  All I had to keep me busy was my brother, best friend, my creativity and the adventures we thought up!  I suppose creativity was a part of my life from the git go.  Probably why I am always churning ideas around and never in boredom.  My boredom contains a canvas and it is never blank.</p>

<p>I am the youngest of 4, being in that position I grew up very determined, competitive and driven.  Some people tell me I am not a type A but have 2 A&#8217;s in my personality.  I love a challenge and figuring out the how to make anything more efficient.  I also love designing and composing music.  With those 2 combinations you get a very interesting person.</p>

<p>As far as programming&#8217;s concerned, well, It all started in the 4th grade.  What better year to begin programming?  I took a class on QBASIC and my curiosity - on how computers work - began.  It opened my eyes that computers are not just some magical things found in a foreign tiny little island with jungles and monkeys and cobras.  I began developing websites in 7th grade, where I spent some of my time engrossed in developing hideous (now hideous, then genius) websites about my life in the fast junior high culture :).  Throughout high school I stepped my web development knowledge more and more, bit by bit.  My first paid contract was my junior year in high school for a flash website and it all started to come together as to why I was spending so much time on the computer nights after nights, mornings after early mornings.</p>

<p>I went to the Art Institute in Schaumburg Illinois majoring in Interactive Media Design in 2006 when I landed a job as a web developer at Wencel Worldwide downtown Chicago.  I quickly realized that with the power of the internet, school was slowing me down in regards to my web development strength.  What I could teach myself in 1 year I would learn at school in 4, and by the time I graduated, what I learned would be obsolete at the exponential rate the internet moves.  I quickly realized if I were to make it in this industry I needed to unleash myself from school so that I could continue to learn the latest and greatest in web development.</p>

<p>After working at Wencel Worldwide full time for a while I landed a job in Saint Louis Missouri as the lead web applications developer at Customer Direct in 2007.  I have been working there as the Lead Ruby on Rails web developer of a team of 4 programmers and 3 systems admins.  I&#8217;ve been focusing my efforts on Ruby on Rails, mentoring the other developers, and teaming to develop some very innovative applications.</p>

<p>In June of 2008 I started a web development solutions company, Envion Studios LLC, focusing on Ruby on Rails and PHP development.  Since then, numerous opportunities have opened up and blossomed into great growing points in my life.</p>

<p>I played baseball and soccer in high school.  Started varsity my sophomore, junior and senior year for soccer, loved every minute of the season.  I played the trumpet in marching band, section leader my sophomore, junior and senior years as well.  I truly believe that being a part of sports and marching band has shaped my life more than anything imaginable.</p>

<p>Music is a huge part in my life.  I play drums, guitar, piano (primary) and I sing.  Mainly as an outlet of my creativity and of life, but also as a way to express what&#8217;s going on inside.  Music is the language of the soul.</p>

<p>I hope you enjoy this blog, I feel contributing back to the community of the internet is an amazing privilege and I am so glad that the internet has become as powerful of a tool as it has.  I have learned much from it, and only hope to contribute a smidgen of knowledge back.</p>

<p>Feel free to check out my personal blog at <a href='http://www.coffeencoke.com' target='_blank' title='My personal blog'>Coffee n' Coke</a> where I ramble about my life, culture, friendships and my walk with christ.</p>

<p>Thanks and enjoy</p>]]></content>
  </entry>
  
</feed>

